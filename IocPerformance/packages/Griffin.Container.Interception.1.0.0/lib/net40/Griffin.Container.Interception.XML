<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.Container.Interception</name>
    </assembly>
    <members>
        <member name="T:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator">
            <summary>
            Wraps each method call and log any exceptions using <see cref="T:Griffin.Container.Interception.Logging.IExceptionLogger"/>.
            </summary>
            <remarks>Will per default decorate all services. Do note that the exceptions 
            are rethrown after the logging (without affecting the callstack)</remarks>
            <example>
            <code>
            <![CDATA[
            // register services
            var registrar = new ContainerRegistrar();
            registrar.RegisterConcrete<TotalFailure>(Lifetime.Transient);
            var container = registrar.Build();
            
            // only log transient services
            var filter = new DelegateDecoratorFilter(ctx => ctx.Lifetime == Lifetime.Transient);
            var decorator = new ExceptionLoggerDecorator(this, filter);
            container.AddDecorator(decorator);
            
            // exception will be logged.
            var tmp = container.Resolve<TotalFailure>();
            tmp.Fail("Big!");
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Griffin.Container.Interception.CastleDecorator">
            <summary>
            Base class which purpose is to simplify the decoration
            </summary>
            <remarks>Inherit this class and implement the abstract methods</remarks>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.CastleDecorator"/> class.
            </summary>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.#ctor(Griffin.Container.Interception.IDecoratorFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.CastleDecorator"/> class.
            </summary>
            <param name="filter">Used to limit the types to decorate</param>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.PreScan(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Allows the decorator to prescan all registered concretes
            </summary>
            <param name="concretes">All registered concretes</param>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.CreateInterceptor(Griffin.Container.DecoratorContext)">
            <summary>
            Create a new interceptor
            </summary>
            <param name="context">The context.</param>
            <returns>Created interceptor (which will be used to handle the instance)</returns>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.CanDecorate(Griffin.Container.DecoratorContext)">
            <summary>
            Determins if an instance should be decorated or not.
            </summary>
            <param name="context">Context</param>
            <returns><c>true</c> if we should attach a decorator; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.Container.Interception.CastleDecorator.Decorate(Griffin.Container.DecoratorContext)">
            <summary>
            Decoration request
            </summary>
            <param name="context">Context info</param>
            <remarks>do not have to decorate, but may if it wants to. sorta..</remarks>
        </member>
        <member name="P:Griffin.Container.Interception.CastleDecorator.IgnoreClassAsService">
            <summary>
            Gets or sets if the class itself should not be used as a service
            </summary>
            <remarks>We do currently not support that a class can register itself
            as a service if interfaces also are registered (simply just register itself or just the interfaces)</remarks>
        </member>
        <member name="M:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator.#ctor(Griffin.Container.Interception.Logging.IExceptionLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator"/> class.
            </summary>
            <param name="logger">Used for the actual logging.</param>
        </member>
        <member name="M:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator.#ctor(Griffin.Container.Interception.Logging.IExceptionLogger,Griffin.Container.Interception.IDecoratorFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator"/> class.
            </summary>
            <param name="logger">Used for the actual logging.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator.PreScan(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Allows the decorator to prescan all registered concretes
            </summary>
            <param name="concretes">All registered concretes</param>
        </member>
        <member name="M:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator.CreateInterceptor(Griffin.Container.DecoratorContext)">
            <summary>
            Create a new interceptor
            </summary>
            <param name="context">The context.</param>
            <returns>
            Created interceptor (which will be used to handle the instance)
            </returns>
        </member>
        <member name="T:Griffin.Container.Interception.ExceptionInterceptor">
            <summary>
            Class which decorates each created instance.
            </summary>
        </member>
        <member name="M:Griffin.Container.Interception.ExceptionInterceptor.#ctor(Griffin.Container.Interception.Logging.IExceptionLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.ExceptionInterceptor"/> class.
            </summary>
            <param name="logger">Interface used for the logging.</param>
        </member>
        <member name="M:Griffin.Container.Interception.ExceptionInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts each method call.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:Griffin.Container.Interception.NamespaceDoc">
            <summary>
            Decorator pattern using Castle.Proxy (and it's interception facilities).
            </summary>
            <remarks>
            <para>
            The easiest way to get started is to create a new class and let it inherit <see cref="T:Griffin.Container.Interception.CastleDecorator"/>. Press
            <c>CTRL+.</c> on <c>CastleDecorator</c> to let visual studio create all methods for you. Then simply read their
            instructions and implement them accordingly.
            </para>
            <para>Check the github repository for samples.</para>
            </remarks>
        </member>
        <member name="T:Griffin.Container.Interception.Logging.IExceptionLogger">
            <summary>
            Invoked by <see cref="T:Griffin.Container.Interception.Logging.ExceptionLoggerDecorator"/>
            </summary>
        </member>
        <member name="M:Griffin.Container.Interception.Logging.IExceptionLogger.LogException(Griffin.Container.Interception.CallContext,System.Exception)">
            <summary>
            Called when an exception have been raised.
            </summary>
            <param name="context">context</param>
            <param name="err">thrown exception</param>
        </member>
        <member name="T:Griffin.Container.Interception.DelegateDecoratorFilter">
            <summary>
            Uses a delegate to determine if the intances can be decorated.
            </summary>
        </member>
        <member name="T:Griffin.Container.Interception.IDecoratorFilter">
            <summary>
            Used to select which classes we should decorate
            </summary>
        </member>
        <member name="M:Griffin.Container.Interception.IDecoratorFilter.CanDecorate(Griffin.Container.DecoratorContext)">
            <summary>
            Determins if an instance should be decorated or not.
            </summary>
            <param name="context">Context</param>
            <returns><c>true</c> if we should attach a decorator; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.Container.Interception.DelegateDecoratorFilter.#ctor(System.Func{Griffin.Container.DecoratorContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.Container.Interception.DelegateDecoratorFilter"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Griffin.Container.Interception.DelegateDecoratorFilter.CanDecorate(Griffin.Container.DecoratorContext)">
            <summary>
            Determins if an instance should be decorated or not.
            </summary>
            <param name="context">Context</param>
            <returns>
              <c>true</c> if we should attach a decorator; otherwise <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
