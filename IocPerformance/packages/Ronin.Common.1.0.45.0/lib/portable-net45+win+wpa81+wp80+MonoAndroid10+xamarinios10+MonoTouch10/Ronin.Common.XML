<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ronin.Common</name>
    </assembly>
    <members>
        <member name="T:Ronin.Common.AtomicBool">
            <summary>
            Represents an atomic boolean implementation.
            </summary>
        </member>
        <member name="M:Ronin.Common.AtomicBool.#ctor(System.Boolean)">
            <summary>
            Constructs an <see cref="T:Ronin.Common.AtomicBool"/>
            </summary>
            <param name="initialValue">The initial internal value.</param>
        </member>
        <member name="P:Ronin.Common.AtomicBool.Value">
            <summary>
            Returns the value of the AtomicBool.
            </summary>
        </member>
        <member name="M:Ronin.Common.AtomicBool.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Compares the internal value with the expected value and if they matches the internal value will be replaced with the new value in one atomic operation.
            </summary>
            <param name="expectedValue">The expected value of the comparison.</param>
            <param name="newValue">The new value, the internal value will be replaced with this.</param>
            <returns></returns>
        </member>
        <member name="T:Ronin.Common.ConcurrentKeyValueStore`2">
            <summary>
            Represents a portable thread safe key-value store.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TContent">The value type.</typeparam>
        </member>
        <member name="T:Ronin.Common.ConcurrentKeyValueStore`2.AddDelegate">
            <summary>
            Delegate for adding a new entry.
            </summary>
        </member>
        <member name="T:Ronin.Common.ConcurrentKeyValueStore`2.UpdateDelegate">
            <summary>
            Delegate for updating an entry.
            </summary>
            <param name="oldValue">The existing value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="F:Ronin.Common.ConcurrentKeyValueStore`2.Repository">
            <summary>
            The key-value repository.
            </summary>
        </member>
        <member name="F:Ronin.Common.ConcurrentKeyValueStore`2.ReaderWriterLock">
            <summary>
            The synchronization lock.
            </summary>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.#ctor">
            <summary>
            Constructs a <see cref="T:Ronin.Common.ConcurrentKeyValueStore`2"/>
            </summary>
        </member>
        <member name="P:Ronin.Common.ConcurrentKeyValueStore`2.Keys">
            <summary>
            Returns with the key collection of the store.
            </summary>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.AddOrUpdate(`0,Ronin.Common.ConcurrentKeyValueStore{`0,`1}.AddDelegate,Ronin.Common.ConcurrentKeyValueStore{`0,`1}.UpdateDelegate)">
            <summary>
            Adds or updates a value in the collection.
            </summary>
            <param name="key">Key of the value which will be added or updated.</param>
            <param name="addFunc">The factory which creates the value which will be added.</param>
            <param name="updateFunc">The factory which creates the value which will be used for replacing the existing value.</param>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.GetOrAdd(`0,Ronin.Common.ConcurrentKeyValueStore{`0,`1}.AddDelegate)">
            <summary>
            Gets an existing value or adds a new one if it's doesn't exists.
            </summary>
            <param name="key">Key of the new or existing entry.</param>
            <param name="valueFactory">The factory which creates the value which will be added to the collection.</param>
            <returns>The value which will be added if it doesn't exists.</returns>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.TryGet(`0,`1@)">
            <summary>
            Tries to retrieve an entry from the collection.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="content">The value which will be filled with the retrieved entry.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.GetAll">
            <summary>
            Retrieves all entry from the collection.
            </summary>
            <returns>All entries of the collection.</returns>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.Add(`0,`1)">
            <summary>
            Adds an entry to the collection.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="content">The value of the entry.</param>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.Set(`0,`1)">
            <summary>
            Sets an already existing entry in the collection.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="content">The new value of the existing entry.</param>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.Remove(`0)">
            <summary>
            Removes an entry from the collection.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:Ronin.Common.ConcurrentKeyValueStore`2.TryRemove(`0)">
            <summary>
            Removes an entry from the collection if exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="T:Ronin.Common.DisposableReaderWriterLock">
            <summary>
            Represents a disposable reader writer lock.
            </summary>
        </member>
        <member name="M:Ronin.Common.DisposableReaderWriterLock.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            Constructs a DisposableReaderWriterLock.
            </summary>
            <param name="recursionPolicy">Policy used for the instantination of the internal ReaderWriterLockSlim.</param>
        </member>
        <member name="M:Ronin.Common.DisposableReaderWriterLock.#ctor">
            <summary>
            Constructs a DisposableReaderWriterLock with LockRecursionPolicy.NoRecursion.
            </summary>
        </member>
        <member name="M:Ronin.Common.DisposableReaderWriterLock.AcquireReadLock">
            <summary>
            Acquires a read lock.
            </summary>
            <returns>A lock releaser objects, which will release the lock when it's dispose is called.</returns>
        </member>
        <member name="M:Ronin.Common.DisposableReaderWriterLock.AcquireWriteLock">
            <summary>
            Acquires a write lock.
            </summary>
            <returns>A lock releaser objects, which will release the lock when it's dispose is called.</returns>
        </member>
        <member name="M:Ronin.Common.DisposableReaderWriterLock.AcquireUpgreadeableReadLock">
            <summary>
            Acquires an upgradeable read lock.
            </summary>
            <returns>A lock releaser objects, which will release the lock when it's dispose is called.</returns>
        </member>
        <member name="T:Ronin.Common.LockReleaser">
            <summary>
            Represents a lock releaser object
            </summary>
        </member>
        <member name="M:Ronin.Common.LockReleaser.Dispose">
            <summary>
            Releases the acquired resources.
            </summary>
        </member>
        <member name="M:Ronin.Common.LockReleaser.Dispose(System.Boolean)">
            <summary>
            Releases the acquired resources.
            </summary>
        </member>
        <member name="T:Ronin.Common.UpgreadableLockReleaser">
            <summary>
            Represents an upgradeable lock releaser object.
            </summary>
        </member>
        <member name="M:Ronin.Common.UpgreadableLockReleaser.AcquireWriteLock">
            <summary>
            Acquires a write lock.
            </summary>
            <returns>A lock releaser objects, which will release the lock when it's dispose is called.</returns>
        </member>
        <member name="M:Ronin.Common.UpgreadableLockReleaser.Dispose">
            <summary>
            Releases the acquired resources.
            </summary>
        </member>
        <member name="M:Ronin.Common.UpgreadableLockReleaser.Dispose(System.Boolean)">
            <summary>
            Releases the acquired resources.
            </summary>
        </member>
        <member name="T:Ronin.Common.Update`1">
            <summary>
            Delegate for updating a node.
            </summary>
            <typeparam name="V">The node type.</typeparam>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value</param>
            <returns></returns>
        </member>
        <member name="T:Ronin.Common.ImmutableTree`2">
            <summary>
            Represents an immutable AVL Tree.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V">The value type.</typeparam>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Empty">
            <summary>Empty tree to start with.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Key">
            <summary>Key of type K that should support <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/>.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Value">
            <summary>Value of any type V.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Hash">
            <summary>Calculated key hash.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Conflicts">
            <summary>In case of <see cref="F:Ronin.Common.ImmutableTree`2.Hash"/> conflicts for different keys contains conflicted keys with their values.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Left">
            <summary>Left sub-tree/branch, or empty.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Right">
            <summary>Right sub-tree/branch, or empty.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`2.Height">
            <summary>Height of longest sub-tree/branch plus 1. It is 0 for empty tree, and 1 for single node tree.</summary>
        </member>
        <member name="P:Ronin.Common.ImmutableTree`2.IsEmpty">
            <summary>Returns true if tree is empty.</summary>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`2.AddOrUpdate(`0,`1,Ronin.Common.Update{`1})">
            <summary>Returns new tree with added key-value. If value with the same key is exist, then
            if <paramref name="update"/> is not specified: then existing value will be replaced by <paramref name="value"/>;
            if <paramref name="update"/> is specified: then update delegate will decide what value to keep.</summary>
            <param name="key">Key to add.</param><param name="value">Value to add.</param>
            <param name="update">(optional) Delegate to decide what value to keep: old or new one.</param>
            <returns>New tree with added or updated key-value.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`2.Update(`0,`1,Ronin.Common.Update{`1})">
            <summary>Looks for <paramref name="key"/> and replaces its value with new <paramref name="value"/>, or 
            runs custom update handler (<paramref name="update"/>) with old and new value to get the updated result.</summary>
            <param name="key">Key to look for.</param>
            <param name="value">New value to replace key value with.</param>
            <param name="update">(optional) Delegate for custom update logic, it gets old and new <paramref name="value"/>
            as inputs and should return updated value as output.</param>
            <returns>New tree with updated value or the SAME tree if no key found.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`2.GetValueOrDefault(`0,`1)">
            <summary>Looks for key in a tree and returns the key value if found, or <paramref name="defaultValue"/> otherwise.</summary>
            <param name="key">Key to look for.</param> <param name="defaultValue">(optional) Value to return if key is not found.</param>
            <returns>Found value or <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`2.Enumerate">
            <summary>Depth-first in-order traversal as described in http://en.wikipedia.org/wiki/Tree_traversal
            The only difference is using fixed size array instead of stack for speed-up (~20% faster than stack).</summary>
            <returns>Sequence of enumerated key value pairs.</returns>
        </member>
        <member name="T:Ronin.Common.ImmutableTree`1">
            <summary>Simple immutable AVL tree with integer keys and object values.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Empty">
            <summary>Empty tree to start with.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Key">
            <summary>Key.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Value">
            <summary>Value.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Left">
            <summary>Left sub-tree/branch, or empty.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Right">
            <summary>Right sub-tree/branch, or empty.</summary>
        </member>
        <member name="F:Ronin.Common.ImmutableTree`1.Height">
            <summary>Height of longest sub-tree/branch plus 1. It is 0 for empty tree, and 1 for single node tree.</summary>
        </member>
        <member name="P:Ronin.Common.ImmutableTree`1.IsEmpty">
            <summary>Returns true is tree is empty.</summary>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`1.AddOrUpdate(System.Int32,`0)">
            <summary>Returns new tree with added or updated value for specified key.</summary>
            <param name="key"></param> <param name="value"></param>
            <returns>New tree.</returns>
        </member>
        <member name="T:Ronin.Common.ImmutableTree`1.UpdateValue">
            <summary>Delegate to calculate new value from and old and a new value.</summary>
            <param name="oldValue">Old</param> <param name="newValue">New</param> <returns>Calculated result.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`1.AddOrUpdate(System.Int32,`0,Ronin.Common.ImmutableTree{`0}.UpdateValue)">
            <summary>Returns new tree with added or updated value for specified key.</summary>
            <param name="key">Key</param> <param name="value">Value</param>
            <param name="updateValue">(optional) Delegate to calculate new value from and old and a new value.</param>
            <returns>New tree.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`1.Update(System.Int32,`0)">
            <summary>Returns new tree with updated value for the key, Or the same tree if key was not found.</summary>
            <param name="key"></param> <param name="value"></param>
            <returns>New tree if key is found, or the same tree otherwise.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`1.GetValueOrDefault(System.Int32)">
            <summary>Get value for found key or null otherwise.</summary>
            <param name="key"></param> <returns>Found value or null.</returns>
        </member>
        <member name="M:Ronin.Common.ImmutableTree`1.Enumerate">
            <summary>Returns all sub-trees enumerated from left to right.</summary> 
            <returns>Enumerated sub-trees or empty if tree is empty.</returns>
        </member>
        <member name="T:Ronin.Common.Shield">
            <summary>
            Represents a utility class for input validation.
            </summary>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNull``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException if it is null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="memberExpression">The expression which returns with the object to be checked.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNull``1(``0,System.String)">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException if it is null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException with the given message if it is null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="memberExpression">The expression which returns with the object to be checked.</param>
            <param name="message">The message to be shown in the exception.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNull``1(``0,System.String,System.String)">
            <summary>
            Checks the value of the given object and throws an ArgumentNullException with the given message if it is null.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
            <param name="message">The message to be shown in the exception.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Checks the value of the given string and throws an ArgumentException if it is null or empty.
            </summary>
            <param name="memberExpression">The expression which returns with the string to be checked.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks the value of the given string and throws an ArgumentException if it is null or empty.
            </summary>
            <param name="obj">The string to be checked.</param>
            <param name="parameterName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureGreaterThan(System.Int32,System.Int32)">
            <summary>
            Checks two integers and throws an ArgumentException if the actual is lesser than the reference.
            </summary>
            <param name="actual">The actual value.</param>
            <param name="reference">The reference value.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureTrue(System.Boolean)">
            <summary>
            Checks a bool condition and throws an ArgumentException if it is false.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Ronin.Common.Shield.EnsureTypeOf``1(System.Object)">
            <summary>
            Checks the type of the given object and throws an ArgumentException if it doesn't matches with the given type parameter.
            </summary>
            <typeparam name="TType">The type parameter.</typeparam>
            <param name="obj">The object to be checked.</param>
        </member>
        <member name="T:Ronin.Common.Swappable`1">
            <summary>
            Represents an object on which an atomic switch can be applied.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Ronin.Common.Swappable`1.Value">
            <summary>
            Gets the internal value.
            </summary>
        </member>
        <member name="M:Ronin.Common.Swappable`1.#ctor(`0)">
            <summary>
            Constructs the <see cref="T:Ronin.Common.Swappable`1"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Ronin.Common.Swappable`1.Swap(`0)">
            <summary>
            Performs the swap operation.
            </summary>
            <param name="newValue">The new value.</param>
            <returns>The original value.</returns>
        </member>
    </members>
</doc>
