<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DryIocAttributes</name>
    </assembly>
    <members>
        <member name="T:DryIocAttributes.ReuseType">
            <summary>List of supported DryIoc reuse types.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseType.Transient">
            <summary>Means no reuse.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseType.Singleton">
            <summary>subj.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseType.CurrentScope">
            <summary>subj.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseType.ResolutionScope">
            <summary>subj.</summary>
        </member>
        <member name="T:DryIocAttributes.IfAlreadyExported">
            <summary>Specifies options to handle situation when registered service is already present in the registry.</summary>
        </member>
        <member name="F:DryIocAttributes.IfAlreadyExported.AppendNotKeyed">
            <summary>Appends new default registration or throws registration with the same key.</summary>
        </member>
        <member name="F:DryIocAttributes.IfAlreadyExported.Throw">
            <summary>Throws if default or registration with the same key is already exist.</summary>
        </member>
        <member name="F:DryIocAttributes.IfAlreadyExported.Keep">
            <summary>Keeps old default or keyed registration ignoring new registration: ensures Register-Once semantics.</summary>
        </member>
        <member name="F:DryIocAttributes.IfAlreadyExported.Replace">
            <summary>Replaces old registration with new one.</summary>
        </member>
        <member name="F:DryIocAttributes.IfAlreadyExported.AppendNewImplementation">
            <summary>Adds new implementation or null (Made.Of), 
            skips registration if the implementation is already registered.</summary>
        </member>
        <member name="T:DryIocAttributes.ExportExAttribute">
            <summary>Provides whole set of possible/supported export options.</summary>
        </member>
        <member name="M:DryIocAttributes.ExportExAttribute.#ctor(System.Object,System.Type,DryIocAttributes.IfAlreadyExported)">
            <summary>Creates attribute.</summary>
            <param name="contractKey">Service key object, should implement <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/></param> 
            <param name="contractType">(optional) Service type.</param>
            <param name="ifAlreadyExported">(optional) Handles export when other such export is already exist.</param>
        </member>
        <member name="M:DryIocAttributes.ExportExAttribute.#ctor(System.Type,DryIocAttributes.IfAlreadyExported)">
            <summary>Creates export with specified service type.</summary> <param name="contractType">Service type.</param>
            <param name="ifAlreadyExported">(optional) Handles export when other such export is already exist.</param>
        </member>
        <member name="M:DryIocAttributes.ExportExAttribute.#ctor(DryIocAttributes.IfAlreadyExported)">
            <summary>Creates export with handling existing export option.</summary>
            <param name="ifAlreadyExported">Handles export when other such export is already exist.</param>
        </member>
        <member name="P:DryIocAttributes.ExportExAttribute.ContractKey">
            <summary>Optional service key or string <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/>.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportExAttribute.IfAlreadyExported">
            <summary>Option to handle existing and duplicate exports.</summary>
        </member>
        <member name="T:DryIocAttributes.ReuseAttribute">
            <summary>Base attribute to specify type of reuse for annotated class.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseAttribute.ReuseType">
            <summary>Implementation of reuse. Could be null to specify transient or no reuse.</summary>
        </member>
        <member name="F:DryIocAttributes.ReuseAttribute.ScopeName">
            <summary>Optional name, valid only for Current Scope Reuse.</summary>
        </member>
        <member name="M:DryIocAttributes.ReuseAttribute.#ctor(DryIocAttributes.ReuseType,System.String)">
            <summary>Create attribute with specified type implementing reuse.</summary>
            <param name="reuseType">Supported reuse type.</param>
            <param name="scopeName">(optional) Name is valid only for Current Scope Reuse and will be ignored by the rest of reuse types.</param>
        </member>
        <member name="T:DryIocAttributes.TransientReuseAttribute">
            <summary>Defines the Transient reuse for exported service.</summary>
        </member>
        <member name="M:DryIocAttributes.TransientReuseAttribute.#ctor">
            <summary>Creates attribute by specifying null as <see cref="F:DryIocAttributes.ReuseAttribute.ReuseType"/>.</summary>
        </member>
        <member name="T:DryIocAttributes.SingletonReuseAttribute">
            <summary>Denotes exported type with Singleton reuse.</summary>
        </member>
        <member name="M:DryIocAttributes.SingletonReuseAttribute.#ctor">
            <summary>Creates attribute.</summary>
        </member>
        <member name="T:DryIocAttributes.CurrentScopeReuseAttribute">
            <summary>Denotes exported type with Current Scope Reuse.</summary>
        </member>
        <member name="M:DryIocAttributes.CurrentScopeReuseAttribute.#ctor(System.String)">
            <summary>Creates attribute.</summary> <param name="scopeName">(optional)</param>
        </member>
        <member name="T:DryIocAttributes.WebRequestReuseAttribute">
            <summary>Marks exported type with Reuse.InWebRequest. 
            Basically it is CurrentScopeReuse with predefined name Reuse.WebRequestScopeName.</summary>
        </member>
        <member name="F:DryIocAttributes.WebRequestReuseAttribute.WebRequestScopeName">
            <summary>Default web reuse scope name. Just a convention supported by DryIoc.</summary>
        </member>
        <member name="M:DryIocAttributes.WebRequestReuseAttribute.#ctor">
            <summary>Creates attribute.</summary>
        </member>
        <member name="T:DryIocAttributes.ThreadReuseAttribute">
            <summary>Marks exported type with Reuse.InThread. 
            Basically it is CurrentScopeReuse with predefined name ThreadScopeContext.ScopeContextName.</summary>
        </member>
        <member name="F:DryIocAttributes.ThreadReuseAttribute.ScopeContextName">
            <summary>Name for root scope in thread context. Just a convention supported by DryIoc.</summary>
        </member>
        <member name="M:DryIocAttributes.ThreadReuseAttribute.#ctor">
            <summary>Creates attribute.</summary>
        </member>
        <member name="T:DryIocAttributes.ResolutionScopeReuseAttribute">
            <summary>Denotes exported type with Resolution Scope Reuse.</summary>
        </member>
        <member name="M:DryIocAttributes.ResolutionScopeReuseAttribute.#ctor">
            <summary>Creates attribute.</summary>
        </member>
        <member name="T:DryIocAttributes.WeaklyReferencedAttribute">
            <summary>Marks exported reused service to be stored as WeakReference</summary>
        </member>
        <member name="T:DryIocAttributes.PreventDisposalAttribute">
            <summary>Marks exported reused service to be Not disposed together with scope.</summary>
        </member>
        <member name="T:DryIocAttributes.AllowDisposableTransientAttribute">
            <summary>Allows disposable transient to be exported.</summary>
        </member>
        <member name="T:DryIocAttributes.TrackDisposableTransientAttribute">
            <summary>Turns On tracking of disposable transient dependency in parent scope or in open scope if resolved directly.</summary>
        </member>
        <member name="T:DryIocAttributes.ExportWithKeyAttribute">
            <summary>OBSOLETE: Please use ExportExAttribute instead. ExportEx adds IfAlreadyExported option, plus may be extended with other options in future.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportWithKeyAttribute.ContractKey">
            <remarks>Specifies service key if <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> is not specified.</remarks>
        </member>
        <member name="M:DryIocAttributes.ExportWithKeyAttribute.#ctor(System.Object,System.Type)">
            <summary>Creates attribute.</summary>
            <param name="contractKey">Service key object, should implement <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/></param> 
            <param name="contractType">Service type.</param>
        </member>
        <member name="M:DryIocAttributes.ExportWithKeyAttribute.#ctor(System.Object)">
            <summary>Creates attribute using implementation type as <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/></summary>
            <param name="contractKey">Service key object, should implement <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.Equals(System.Object)"/></param> 
        </member>
        <member name="T:DryIocAttributes.ExportManyAttribute">
            <summary>Specifies to export all implemented contract types automatically.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportManyAttribute.ContractKey">
            <summary>Specifies service key if <see cref="P:DryIocAttributes.ExportManyAttribute.ContractName"/> is not specified.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportManyAttribute.ContractName">
            <summary>OBSOLETE: Use ContractKey instead.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportManyAttribute.Except">
            <summary>Excludes specified contract types.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportManyAttribute.NonPublic">
            <summary>Public types by default.</summary>
        </member>
        <member name="P:DryIocAttributes.ExportManyAttribute.IfAlreadyExported">
            <summary>Option to handle existing and duplicate exports.</summary>
        </member>
        <member name="T:DryIocAttributes.AsFactoryAttribute">
            <summary>Specifies that class exporting static or instance method factories</summary>
        </member>
        <member name="T:DryIocAttributes.AsWrapperAttribute">
            <summary>Exports service as custom wrapper.</summary>
        </member>
        <member name="P:DryIocAttributes.AsWrapperAttribute.WrappedServiceTypeArgIndex">
            <summary>For open-generic wrapper indicates wrapped argument type index.</summary>
        </member>
        <member name="P:DryIocAttributes.AsWrapperAttribute.AlwaysWrapsRequiredServiceType">
            <summary>Per name.</summary>
        </member>
        <member name="M:DryIocAttributes.AsWrapperAttribute.#ctor(System.Int32,System.Boolean)">
            <summary>Creates attribute with <see cref="P:DryIocAttributes.AsWrapperAttribute.WrappedServiceTypeArgIndex"/>.</summary>
            <param name="wrappedServiceTypeArgIndex">(optional) To use single generic type arg.</param>
            <param name="alwaysWrapsRequiredServiceType">(optional) Required for generic wrapper to ignore its type arguments.</param>
        </member>
        <member name="T:DryIocAttributes.AsDecoratorAttribute">
            <summary>Specifies that exported service is decorator of services of <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>.</summary>
        </member>
        <member name="P:DryIocAttributes.AsDecoratorAttribute.ContractName">
            <summary>If <see cref="P:DryIocAttributes.AsDecoratorAttribute.ContractName"/> specified, it has more priority over <see cref="P:DryIocAttributes.AsDecoratorAttribute.ContractKey"/>. </summary>
        </member>
        <member name="P:DryIocAttributes.AsDecoratorAttribute.ContractKey">
            <summary>Contract key of Decorated type, not for a decorator itself. Used to find the service to apply decorator to.</summary>
        </member>
        <member name="P:DryIocAttributes.AsDecoratorAttribute.Order">
            <summary>If provided specifies relative decorator position in decorators chain.
            Greater number means further from decoratee - specify negative number to stay closer.
            Decorators without order (Order is 0) or with equal order are applied in registration order 
            - first registered are closer decoratee.</summary>
        </member>
        <member name="P:DryIocAttributes.AsDecoratorAttribute.UseDecorateeReuse">
            <summary>Instructs to use decorated service reuse. Decorated service may be decorator itself.</summary>
        </member>
        <member name="M:DryIocAttributes.AsDecoratorAttribute.#ctor(System.Object,System.Int32,System.Boolean)">
            <summary>Creates attribute by providing its optional properties.</summary>
            <param name="contractKey">(optional) Contract key of Decorated type, not for a decorator itself. 
            Used to find the service to apply decorator to.</param> 
            <param name="order">(optional)If provided specifies relative decorator position in decorators chain.
            Greater number means further from decoratee - specify negative number to stay closer.
            Decorators without order (Order is 0) or with equal order are applied in registration order 
            - first registered are closer decoratee.</param>
            <param name="useDecorateeReuse">(optional) Instructs to use decorated service reuse. 
            Decorated service may be decorator itself.</param>
        </member>
        <member name="M:DryIocAttributes.AsDecoratorAttribute.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Creates attributes with <see cref="P:DryIocAttributes.AsDecoratorAttribute.ContractName"/> and optional order.</summary>
            <param name="contractName"></param> <param name="order">(optional)</param>
            <param name="useDecorateeReuse">(optional)</param>
        </member>
        <member name="T:DryIocAttributes.FactoryType">
            <summary>Type of services supported by Container.</summary>
        </member>
        <member name="F:DryIocAttributes.FactoryType.Service">
            <summary>(default) Defines normal service factory</summary>
        </member>
        <member name="F:DryIocAttributes.FactoryType.Decorator">
            <summary>Defines decorator factory</summary>
        </member>
        <member name="F:DryIocAttributes.FactoryType.Wrapper">
            <summary>Defines wrapper factory.</summary>
        </member>
        <member name="T:DryIocAttributes.RequestInfo">
            <summary>Dependency request path information.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.Empty">
            <summary>Represents empty info (indicated by null <see cref="F:DryIocAttributes.RequestInfo.ServiceType"/>).</summary>
        </member>
        <member name="P:DryIocAttributes.RequestInfo.IsEmpty">
            <summary>Returns true for an empty request.</summary>
        </member>
        <member name="P:DryIocAttributes.RequestInfo.IsResolutionRoot">
            <summary>Returns true if request is the first in a chain.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.ParentOrWrapper">
            <summary>Parent request or null for root resolution request.</summary>
        </member>
        <member name="P:DryIocAttributes.RequestInfo.Parent">
            <summary>Returns service parent skipping wrapper if any. To get immediate parent us <see cref="F:DryIocAttributes.RequestInfo.ParentOrWrapper"/>.</summary>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.FirstOrEmpty(System.Func{DryIocAttributes.RequestInfo,System.Boolean})">
            <summary>Gets first request info starting with itself which satisfies the condition, or empty otherwise.</summary>
            <param name="condition">Condition to stop on. Should not be null.</param>
            <returns>Request info of found parent.</returns>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.ServiceType">
            <summary>Asked service type.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.RequiredServiceType">
            <summary>Required service type if specified.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.ServiceKey">
            <summary>Optional service key.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.FactoryID">
            <summary>Resolved factory ID, used to identify applied decorator.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.FactoryType">
            <summary>False for Decorators and Wrappers.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.ImplementationType">
            <summary>Implementation type.</summary>
        </member>
        <member name="F:DryIocAttributes.RequestInfo.ReuseLifespan">
            <summary>Relative number representing reuse lifespan.</summary>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.Push(System.Type,System.Int32,System.Type,System.Int32)">
            <summary>Simplified version of Push with most common properties.</summary>
            <param name="serviceType"></param> <param name="factoryID"></param> <param name="implementationType"></param>
            <param name="reuseLifespan"></param> <returns>Created info chain to current (parent) info.</returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.Push(System.Type,System.Type,System.Object,System.Int32,DryIocAttributes.FactoryType,System.Type,System.Int32)">
            <summary>Creates info by supplying all the properties and chaining it with current (parent) info.</summary>
            <param name="serviceType"></param> <param name="requiredServiceType"></param>
            <param name="serviceKey"></param> <param name="factoryType"></param> <param name="factoryID"></param>
            <param name="implementationType"></param> <param name="reuseLifespan"></param>
            <returns>Created info chain to current (parent) info.</returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.Enumerate">
            <summary>Returns all request until the root - parent is null.</summary>
            <returns>Requests from the last to first.</returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.ToString">
            <summary>Prints request with all its parents to string.</summary> <returns>The string.</returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.Equals(System.Object)">
            <summary>Returns true if request info and passed object are equal, and their parents recursively are equal.</summary>
            <param name="obj"></param> <returns></returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.Equals(DryIocAttributes.RequestInfo)">
            <summary>Returns true if request info and passed info are equal, and their parents recursively are equal.</summary>
            <param name="other"></param> <returns></returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.EqualsWithoutParent(DryIocAttributes.RequestInfo)">
            <summary>Compares with other info taking into account the properties but not the parents and their properties.</summary>
            <param name="other">Info to compare for equality.</param> <returns></returns>
        </member>
        <member name="M:DryIocAttributes.RequestInfo.GetHashCode">
            <summary>Returns hash code combined from info fields plus its parent.</summary>
            <returns>Combined hash code.</returns>
        </member>
        <member name="T:DryIocAttributes.ExportConditionAttribute">
            <summary>Base type for exported type Setup Condition.</summary>
        </member>
        <member name="M:DryIocAttributes.ExportConditionAttribute.Evaluate(DryIocAttributes.RequestInfo)">
            <summary>Returns true to use exported service for request.</summary>
            <param name="request"></param> <returns>True to use exported service for request.</returns>
        </member>
        <member name="T:DryIocAttributes.ImportWithKeyAttribute">
            <summary>Imports service Only with equal <see cref="P:DryIocAttributes.ImportWithKeyAttribute.ContractKey"/>.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportWithKeyAttribute.ContractKey">
            <summary>Arbitrary object to match with service key.</summary>
        </member>
        <member name="M:DryIocAttributes.ImportWithKeyAttribute.#ctor(System.Object,System.Type)">
            <summary>Creates attribute object service key.</summary> <param name="contractKey"></param>
            <param name="contractType">(optional) If missing then imported member type will be used as service type.</param>
        </member>
        <member name="M:DryIocAttributes.ImportWithKeyAttribute.#ctor(System.String,System.Type)">
            <summary>Creates attribute with string service name.</summary> <param name="contractKey"></param>
            <param name="contractType">(optional) If missing then imported member type will be used as service type.</param>
        </member>
        <member name="T:DryIocAttributes.WithMetadataAttribute">
            <summary>Exports service with associated metadata object.</summary>
        </member>
        <member name="F:DryIocAttributes.WithMetadataAttribute.Metadata">
            <summary>Metadata object</summary>
        </member>
        <member name="M:DryIocAttributes.WithMetadataAttribute.#ctor(System.Object)">
            <summary>Creates attribute</summary> <param name="metadata"></param>
        </member>
        <member name="T:DryIocAttributes.ImportExternalAttribute">
            <summary>Indicate to import service and in case it is not registered, register it using provided
            implementation info. Useful for ad-hoc/quick-prototyping registration of types from not controlled libraries.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportExternalAttribute.ImplementationType">
            <summary>Implementation type of registered service.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportExternalAttribute.ConstructorSignature">
            <summary>Use specific constructor for registration.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportExternalAttribute.Metadata">
            <summary>Metadata associated with registration.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportExternalAttribute.ContractKey">
            <summary>Registering (and importing) with specified service key.</summary>
        </member>
        <member name="P:DryIocAttributes.ImportExternalAttribute.ContractType">
            <summary>Registering (and importing) with specified service type.</summary>
        </member>
        <member name="M:DryIocAttributes.ImportExternalAttribute.#ctor(System.Type,System.Type[],System.Object,System.Object,System.Type)">
            <summary>Creates attributes.</summary>
            <param name="implementationType">(optional) Implementation type of registered service.</param>
            <param name="constructorSignature">(optional) Use specific constructor for registration.</param>
            <param name="metadata">(optional) Metadata associated with registration.</param>
            <param name="contractKey">(optional) Registering (and importing) with specified service key.</param>
            <param name="contractType">(optional) Registering (and importing) with specified service type.</param>
        </member>
        <member name="T:DryIocAttributes.OpenResolutionScopeAttribute">
            <summary>Exported type should open resolution scope when injected.</summary>
        </member>
        <member name="T:DryIocAttributes.AsResolutionCallAttribute">
            <summary>Marker for resolution root exports.</summary>
        </member>
        <member name="T:DryIocAttributes.AsResolutionRootAttribute">
            <summary>Marker for resolution root exports.</summary>
        </member>
        <member name="T:DryIocAttributes.UseParentReuseAttribute">
            <summary>Marker for resolution root exports.</summary>
        </member>
        <member name="T:System.ComponentModel.Composition.ExportAttribute">
            <summary>Specifies to register annotated type in container. 
            Or you could annotate Method with this attribute, and the method will be used as Factory Method for registration.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractName">
            <summary>Optional contract name to identify registered service when you are importing it.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.ExportAttribute.ContractType">
            <summary>Optional service type to register with, if omitted then annotated implementation type will be used as service type.
            If specified it should be assignable from annotated type.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor">
            <summary>Creates default attribute without <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> and with annotated type as <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.Type)">
            <summary>Creates Export with specified <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>, which should be assignable from annotated type.</summary>
            <param name="contractType">Contract type.</param>
        </member>
        <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String)">
            <summary>Creates Export with specified <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> to identify service when imported.</summary>
            <param name="contractName">Contract name.</param>
        </member>
        <member name="M:System.ComponentModel.Composition.ExportAttribute.#ctor(System.String,System.Type)">
            <summary>Creates Export with both <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> and <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/> specified.</summary>
            <param name="contractName"><see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/></param>
            <param name="contractType"><see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/></param>
        </member>
        <member name="T:System.ComponentModel.Composition.InheritedExportAttribute">
            <summary>Specifies that all types inherited from annotated type should be exported (see <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>) 
            with these settings.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor">
            <summary>Create default attribute without <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> 
            and with annotated type as <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)">
            <summary>Creates Export with specified <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>, which should be assignable from annotated type.</summary>
            <param name="contractType">Contract type.</param>
        </member>
        <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)">
            <summary>Creates Export with specified <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> to identify service when imported.</summary>
            <param name="contractName">Contract name.</param>
        </member>
        <member name="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)">
            <summary>Creates Export with both <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> and <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/> specified.</summary>
            <param name="contractName"><see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/></param>
            <param name="contractType"><see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/></param>
        </member>
        <member name="T:System.ComponentModel.Composition.PartNotDiscoverableAttribute">
            <summary>Prevents annotated type from being exported, if its base type was marked with <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute"/>.</summary>
        </member>
        <member name="T:System.ComponentModel.Composition.CreationPolicy">
            <summary>Specifies that exported type instance should be NonShared (created in each Import - aka Transient) 
            or Shared (created once and then reused in each Import - aka Singleton).</summary>
        </member>
        <member name="F:System.ComponentModel.Composition.CreationPolicy.Any">
            <summary>Default for compatibility with MEF .NET 4.5, in DryIoc means the same as <see cref="F:System.ComponentModel.Composition.CreationPolicy.Shared"/>.</summary>
        </member>
        <member name="F:System.ComponentModel.Composition.CreationPolicy.Shared">
            <summary>(default) Exported type instance will be created once and then reused in each Import - aka Singleton</summary>
        </member>
        <member name="F:System.ComponentModel.Composition.CreationPolicy.NonShared">
            <summary>Exported type instance will be created in each Import - aka Transient.</summary>
        </member>
        <member name="T:System.ComponentModel.Composition.PartCreationPolicyAttribute">
            <summary>Specifies <see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy"/> fro Exported type.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy">
            <summary>Creation policy, Shared by default.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.PartCreationPolicyAttribute.#ctor(System.ComponentModel.Composition.CreationPolicy)">
            <summary>Creates attribute.</summary> <param name="policy"><see cref="P:System.ComponentModel.Composition.PartCreationPolicyAttribute.CreationPolicy"/></param>
        </member>
        <member name="T:System.ComponentModel.Composition.ImportingConstructorAttribute">
            <summary>Specifies that annotated constructor should be used for creating Exported type.</summary>
        </member>
        <member name="T:System.ComponentModel.Composition.ImportAttribute">
            <summary>Specifies that for parameter, property or field should be injected with service instance identified by
            attribute settings. Import is not required for constructor parameters in Exported type: it is needed only
            if you want specify <see cref="P:System.ComponentModel.Composition.ImportAttribute.ContractType"/> type different from parameter type.
            For properties and fields attribute is required, otherwise they won't be injected.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractName">
            <summary>Optional, identifies Exported service with equal <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> to be injected.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.ImportAttribute.ContractType">
            <summary>Optional, identifies Exported service with equal <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/> to be injected.
            The specified type should be assignable to annotated parameter, property or field type.</summary>
        </member>
        <member name="P:System.ComponentModel.Composition.ImportAttribute.AllowDefault">
            <summary>Allow default value for the member if corresponding Exported service was found. 
            If not specified, then instead of default value Exception will be thrown.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor">
            <summary>Creates default attribute. Required for property or field to be imported. May be omitted for parameters.</summary>
        </member>
        <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.Type)">
            <summary>Import with matched <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>. Type should assignable to annotated member.</summary>
            <param name="contractType"></param>
        </member>
        <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String)">
            <summary>Import with matched <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/>.</summary>
            <param name="contractName"></param>
        </member>
        <member name="M:System.ComponentModel.Composition.ImportAttribute.#ctor(System.String,System.Type)">
            <summary>Import with both matched <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractName"/> and <see cref="P:System.ComponentModel.Composition.ExportAttribute.ContractType"/>.</summary>
            <param name="contractName"></param> <param name="contractType"></param>
        </member>
        <member name="T:System.ComponentModel.Composition.MetadataAttributeAttribute">
            <summary>Specifies that annotated attribute should be used as metadata object associated with Export.
            You can create your won custom Export attribute with metadata by deriving from <see cref="T:System.ComponentModel.Composition.ExportAttribute"/> and
            annotating new attribute with <see cref="T:System.ComponentModel.Composition.MetadataAttributeAttribute"/>.</summary>
        </member>
    </members>
</doc>
