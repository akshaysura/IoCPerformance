<#
//===========================================
// The code is provided by YOU:
// You may configure container,
// Register your services,
// And return container ready for generation.
//
// GetContainerWithRegistrations  
// implementation below is just an EXAMPLE!
//===========================================
#>
<#@ assembly Name="$(SolutionDir)packages\DryIocAttributes.dll.2.2.0\lib\net45\DryIocAttributes.dll" #>
<#@ assembly Name="$(SolutionDir)packages\DryIoc.MefAttributedModel.dll.2.2.2\lib\net45\DryIoc.MefAttributedModel.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel" #>

<#/* EXAMPLE: I am referencing assembly and namespace with my services to register. Replace it with yours! */#>
<#@ assembly Name="$(ProjectDir)\..\bin\$(Configuration)\DryIoc.MefAttributedModel.UnitTests.CUT.dll" #>
<#@ import Namespace="DryIoc.MefAttributedModel.UnitTests.CUT" #>

<#+
// Specify your container and registrations
IContainer GetContainerWithRegistrations()
{
    var container = new Container().WithMefAttributedModel();

	// EXAMPLE: Replace with your assemblies and types. 
    var types = typeof(IDecoratedResult).Assembly.GetLoadedTypes();
    container.RegisterExports(types);

	// NOTE: RegisterDelegate and RegisterInstance are not supported because of runtime state usage. 
	// Instead you can use Register(Made.Of(() => GetSomething())) registrations which generally are preferred over Delegate/Instance
	// because container may inspect and warn you on possible resolution errors.
	// Below registration is not supported and will output error message during generation.
	// container.RegisterDelegate(_ => "delegate result", setup: Setup.With(asResolutionRoot: true));

    return container;
}

// Specify what resolution roots should be generated
bool IsResolutionRoot(ServiceRegistrationInfo info) 
{
	// EXAMPLE: I am selecting the roots registered with Setup.With(asResolutionRoot: true) or AsResolutionRootAttribute.
	// You may apply any custom filter against input ServiceRegistrationInfo.
	return ContainerTools.SetupAsResolutionRoots(info);
}
#>