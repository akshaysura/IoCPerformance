<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DryIoc.MefAttributedModel</name>
    </assembly>
    <members>
        <member name="T:DryIoc.MefAttributedModel.AttributedModel">
            <summary>Implements MEF Attributed Programming Model. 
            Documentation is available at https://bitbucket.org/dadhi/dryioc/wiki/MefAttributedModel. </summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.AttributedModel.DefaultReuse">
            <summary>Default reuse policy is Singleton, as in MEF.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.AttributedModel.SupportedReuseTypes">
            <summary>Map of supported reuse types: so the reuse type specified by <see cref="T:DryIocAttributes.ReuseAttribute"/> 
            could be mapped to corresponding <see cref="T:DryIoc.Reuse"/> members.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.WithMefAttributedModel(DryIoc.Rules)">
            <summary>Returns new rules with attributed model importing rules appended.</summary>
            <param name="rules">Source rules to append importing rules to.</param>
            <returns>New rules with attributed model rules.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.WithMefAttributedModel(DryIoc.IContainer)">
            <summary>Appends attributed model rules to passed container.</summary>
            <param name="container">Source container to apply attributed model importing rules to.</param>
            <returns>Returns new container with new rules.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.RegisterExports(DryIoc.IRegistrator,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Registers implementation type(s) with provided registrator/container. Expects that
            implementation type are annotated with <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>, or <see cref="T:DryIocAttributes.ExportManyAttribute"/>.</summary>
            <param name="registrator">Container to register types into.</param>
            <param name="types">Provides types to peek exported implementation types from.</param>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.RegisterExports(DryIoc.IRegistrator,System.Type[])">
            <summary>Registers implementation type(s) with provided registrator/container. Expects that
            implementation type are annotated with <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>, or <see cref="T:DryIocAttributes.ExportManyAttribute"/>.</summary>
            <param name="registrator">Container to register types into.</param>
            <param name="types">Implementation types to register.</param>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.RegisterExports(DryIoc.IRegistrator,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>First scans (<see cref="M:DryIoc.MefAttributedModel.AttributedModel.Scan(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/>) provided assemblies to find types annotated with
            <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>, or <see cref="T:DryIocAttributes.ExportManyAttribute"/>.
            Then registers found types into registrator/container.</summary>
            <param name="registrator">Container to register into</param>
            <param name="assemblies">Provides assemblies to scan for exported implementation types.</param>
            <remarks>In case of <see cref="T:System.Reflection.ReflectionTypeLoadException"/> try get type with <see cref="M:DryIoc.ReflectionTools.GetLoadedTypes(System.Reflection.Assembly)"/>.</remarks>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.RegisterExports(DryIoc.IRegistrator,System.Collections.Generic.IEnumerable{DryIoc.MefAttributedModel.ExportedRegistrationInfo})">
            <summary>Registers new factories into registrator/container based on provided registration info's, which
            is serializable DTO for registration.</summary>
            <param name="registrator">Container to register into.</param>
            <param name="infos">Registrations to register.</param>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.RegisterInfo(DryIoc.IRegistrator,DryIoc.MefAttributedModel.ExportedRegistrationInfo)">
            <summary>Registers factories into registrator/container based on single provided info, which could
            contain multiple exported services with single implementation.</summary>
            <param name="registrator">Container to register into.</param>
            <param name="info">Registration information provided.</param>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.Scan(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>Scans assemblies to find concrete type annotated with <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>, or <see cref="T:DryIocAttributes.ExportManyAttribute"/>
            attributes, and create serializable DTO with all information required for registering of exported types.</summary>
            <param name="assemblies">Assemblies to scan.</param>
            <returns>Lazy collection of registration info DTOs.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.GetRegistrationInfoOrDefault(System.Type)">
            <summary>Creates registration info DTO for provided type. To find this info checks type attributes:
            <see cref="T:System.ComponentModel.Composition.ExportAttribute"/>, or <see cref="T:DryIocAttributes.ExportManyAttribute"/>.
            If type is not concrete or is value type, then return null.</summary>
            <param name="implementationType">Type to convert into registration info.</param>
            <returns>Created DTO.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModel.GetReuse(DryIocAttributes.ReuseType,System.Object)">
            <summary>Returns reuse object by mapping provided type to <see cref="F:DryIoc.MefAttributedModel.AttributedModel.SupportedReuseTypes"/>.
            Returns null (transient or no reuse) if null provided reuse type.</summary>
            <param name="reuseType">Reuse type to find in supported.</param>
            <param name="reuseName">(optional) Reuse name to match with scope name.</param>
            <returns>Supported reuse object.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.Error">
            <summary>Defines error codes and messages for <see cref="T:DryIoc.MefAttributedModel.AttributedModelException"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.Error.Messages">
            <summary>Error messages for corresponding codes.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.Error.FirstErrorCode">
            <summary>Codes are starting from this value.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.Error.GetMessage(System.Int32)">
            <summary>Returns message by provided error code.</summary>
            <param name="error">Code starting from <see cref="F:DryIoc.MefAttributedModel.Error.FirstErrorCode"/></param> <returns>String message.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.AttributedModelException">
            <summary>Specific exception type to be thrown by MefAttributedModel extension. Check <see cref="T:DryIoc.MefAttributedModel.Error"/> for possible error cases.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.AttributedModelException.Of(DryIoc.ErrorCheck,System.Int32,System.Object,System.Object,System.Object,System.Object,System.Exception)">
            <summary>Creates exception by wrapping <paramref name="errorCode"/> and with message corresponding to code.</summary>
            <param name="errorCheck">Type of check was done.</param> <param name="errorCode">Error code to wrap, <see cref="T:DryIoc.MefAttributedModel.Error"/> for codes defined.</param>
            <param name="arg0">(optional) Arguments for formatted message.</param> <param name="arg1"></param> <param name="arg2"></param> <param name="arg3"></param> 
            <param name="inner">(optional) Inner exception to wrap.</param>
            <returns>Create exception object.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.PrintCode">
            <summary>Converts provided literal into valid C# code. Used for generating registration code 
            from <see cref="T:DryIoc.MefAttributedModel.ExportedRegistrationInfo"/> DTOs.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.PrintCode.AppendBool(System.Text.StringBuilder,System.Boolean)">
            <summary>Prints valid c# Boolean literal: true/false.</summary>
            <param name="code">Code to print to.</param> <param name="x">Value to print.</param> <returns>Code with appended literal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.PrintCode.AppendString(System.Text.StringBuilder,System.String)">
            <summary>Prints valid c# string constant.</summary>
            <param name="code">Code to print to.</param> <param name="x">Value to print.</param> <returns>Code with appended literal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.PrintCode.AppendType(System.Text.StringBuilder,System.Type)">
            <summary>Prints valid c# Type literal: typeof(Namespace.Type).</summary>
            <param name="code">Code to print to.</param> <param name="x">Value to print.</param> <returns>Code with appended literal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.PrintCode.AppendEnum(System.Text.StringBuilder,System.Type,System.Object)">
            <summary>Prints valid c# Enum literal: Enum.Value.</summary>
            <param name="code">Code to print to.</param>
            <param name="enumType">Enum type of the value.</param>
            <param name="x">Value to print.</param> <returns>Code with appended literal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.PrintCode.AppendCode(System.Text.StringBuilder,System.Object,System.Action{System.Text.StringBuilder,System.Object})">
            <summary>Prints valid c# literal depending of <paramref name="x"/> type.</summary>
            <param name="code">Code to print to.</param> <param name="x">Value to print.</param>
            <param name="ifNotRecognized">(optional) Delegate to print unrecognized value.</param>
            <returns>Code with appended literal.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.ExportedRegistrationInfo">
            <summary>Serializable DTO of all registration information.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.Exports">
            <summary>All exports defined for implementation type (registration).</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ImplementationType">
            <summary>Concrete type on what exports are defined: exported type.</summary>
            <remarks>May be null if <see cref="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ImplementationTypeFullName"/> specified.</remarks>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ImplementationTypeFullName">
            <summary>Full name of exported type. Enables type lazy-loading scenario.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.Reuse">
            <summary>One of <see cref="F:DryIoc.MefAttributedModel.AttributedModel.SupportedReuseTypes"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ReuseName">
            <summary>Name to pass to reuse factory from <see cref="F:DryIoc.MefAttributedModel.AttributedModel.SupportedReuseTypes"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.OpenResolutionScope">
            <summary>Corresponds to <see cref="P:DryIoc.Setup.OpenResolutionScope"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.AsResolutionCall">
            <summary>Corresponds to <see cref="P:DryIoc.Setup.AsResolutionCall"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.AsResolutionRoot">
            <summary>Corresponds to <see cref="P:DryIoc.Setup.AsResolutionRoot"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.PreventDisposal">
            <summary>Specifies to prevent disposal of reused instance if it is disposable</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.WeaklyReferenced">
            <summary>Specifies to store reused instance as WeakReference.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.AllowDisposableTransient">
            <summary>Allows registering transient disposable. But the disposal is up to you.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.TrackDisposableTransient">
            <summary>Turns On tracking of disposable transient dependency in parent scope or in open scope if resolved directly.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.UseParentReuse">
            <summary>Instructs to use parent reuse. Applied only if Reuse is not specified.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.HasMetadataAttribute">
            <summary>True if exported type has metadata.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.FactoryType">
            <summary>Factory type to specify <see cref="T:DryIoc.Setup"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.Decorator">
            <summary>Not null if exported with <see cref="T:DryIocAttributes.AsDecoratorAttribute"/>, contains info about decorator.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.Wrapper">
            <summary>Not null if exported with <see cref="T:DryIocAttributes.AsWrapperAttribute"/>, contains info about wrapper.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.IsFactory">
            <summary>True if exported with <see cref="T:DryIocAttributes.AsFactoryAttribute"/>.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ConditionType">
            <summary>Type consisting of single method compatible with <see cref="P:DryIoc.Setup.Condition"/> type.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportedRegistrationInfo.CreateFactory(DryIoc.Made)">
            <summary>Creates factory out of registration info.</summary>
            <param name="made">(optional) Injection rules. Used if registration <see cref="F:DryIoc.MefAttributedModel.ExportedRegistrationInfo.IsFactory"/> to specify factory methods.</param>
            <returns>Created factory.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportedRegistrationInfo.GetSetup(System.Attribute[])">
            <summary>Create factory setup from DTO data.</summary>
            <param name="attributes">Implementation type attributes provided to get optional metadata.</param>
            <returns>Created factory setup.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportedRegistrationInfo.Equals(System.Object)">
            <summary>Compares with another info for equality.</summary>
            <param name="obj">Other info to compare.</param> <returns>True if equal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportedRegistrationInfo.ToCode(System.Text.StringBuilder)">
            <summary>Generate valid c# code for instantiating of info from its state. Supposed be used in compile-time scenarios.</summary>
            <param name="code">Code to append "new RegistrationInfo(...)" to.</param>
            <returns>Code with "new info".</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.ExportInfo">
            <summary>Defines DTO for exported service type and key.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportInfo.ServiceType">
            <summary>Contract type.</summary>
            <remarks>may be null if <see cref="F:DryIoc.MefAttributedModel.ExportInfo.ServiceTypeFullName"/> specified.</remarks>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportInfo.ServiceTypeFullName">
            <summary>Full contract type name. Supposed to be used in lazy-loading scenario.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportInfo.ServiceKeyInfo">
            <summary>Wrapped contract name or service key. It is wrapped in order to be serializable.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ExportInfo.IfAlreadyRegistered">
            <summary>If already registered option to pass to container registration.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportInfo.#ctor">
            <summary>Default constructor is usually required by deserializer.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportInfo.#ctor(System.Type,System.Object,DryIoc.IfAlreadyRegistered)">
            <summary>Creates exported info out of type and optional key.</summary>
            <param name="serviceType">Contract type to store.</param>
            <param name="serviceKey">(optional) ContractName string or service key.</param>
            <param name="ifAlreadyRegistered">(optional) Handles the case when the same export is already registered.</param>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportInfo.Equals(System.Object)">
            <summary>Compares with another info for equality.</summary>
            <param name="obj">Other info to compare.</param> <returns>True if equal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ExportInfo.ToCode(System.Text.StringBuilder)">
            <summary>Generates valid c# code to "new <see cref="T:DryIoc.MefAttributedModel.ExportInfo"/>() { ... };" from its state.</summary>
            <param name="code">Code to append generated code to.</param>
            <returns>Code with appended generated info.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.WrapperInfo">
            <summary>Defines wrapper setup in serializable way.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.WrapperInfo.WrappedServiceTypeArgIndex">
            <summary>Index of wrapped type argument in open-generic wrapper.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.WrapperInfo.AlwaysWrapsRequiredServiceType">
            <summary>Per name.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.WrapperInfo.GetSetup">
            <summary>Creates Wrapper setup from this info.</summary> <returns>Setup.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.WrapperInfo.Equals(System.Object)">
            <summary>Used to compare wrappers info for equality.</summary> <param name="obj">Other info to compare.</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.WrapperInfo.ToCode(System.Text.StringBuilder)">
            <summary>Converts info to valid C# code to be used in generation scenario.</summary>
            <param name="code">Code to append to.</param> <returns>Code with appended info code.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.DecoratorInfo">
            <summary>Provides serializable info about Decorator setup.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.DecoratorInfo.DecoratedServiceKeyInfo">
            <summary>Decorated service key info. Info wrapper is required for serialization.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.DecoratorInfo.Order">
            <summary>Controls the order that decorators are registered in the container when multiple decorators are used for a single type.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.DecoratorInfo.UseDecorateeReuse">
            <summary>Instructs to use decorated service reuse. Decorated service may be decorator itself.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.DecoratorInfo.GetSetup(System.Func{DryIoc.RequestInfo,System.Boolean})">
            <summary>Converts info to corresponding decorator setup.</summary>
            <param name="condition">(optional) <see cref="P:DryIoc.Setup.Condition"/>.</param>
            <returns>Decorator setup.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.DecoratorInfo.Equals(System.Object)">
            <summary>Compares this info to other info for equality.</summary> <param name="obj">Other info to compare.</param>
            <returns>true if equal.</returns>
        </member>
        <member name="M:DryIoc.MefAttributedModel.DecoratorInfo.ToCode(System.Text.StringBuilder)">
            <summary>Converts info to valid C# code to be used in generation scenario.</summary>
            <param name="code">Code to append to.</param> <returns>Code with appended info code.</returns>
        </member>
        <member name="T:DryIoc.MefAttributedModel.ServiceKeyInfo">
            <summary>Wrapper on un-typed key object for serialization purposes.</summary>
            <remarks>May be unnecessary and only required by ProtocolBufferers. NOTE: Require further checks.</remarks>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ServiceKeyInfo.Default">
            <summary>Default key to represent null key object.</summary>
        </member>
        <member name="F:DryIoc.MefAttributedModel.ServiceKeyInfo.Key">
            <summary>Original key.</summary>
        </member>
        <member name="M:DryIoc.MefAttributedModel.ServiceKeyInfo.Of(System.Object)">
            <summary>Wraps key.</summary> <param name="key">Input key.</param> <returns>Wrapper.</returns>
        </member>
    </members>
</doc>
