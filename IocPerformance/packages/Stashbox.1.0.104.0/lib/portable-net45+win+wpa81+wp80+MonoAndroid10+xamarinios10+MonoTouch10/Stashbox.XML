<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stashbox</name>
    </assembly>
    <members>
        <member name="T:Stashbox.Attributes.DependencyAttribute">
            <summary>
            Represents an attribute for tracking dependencies.
            </summary>
        </member>
        <member name="P:Stashbox.Attributes.DependencyAttribute.Name">
            <summary>
            The name of the dependency.
            </summary>
        </member>
        <member name="M:Stashbox.Attributes.DependencyAttribute.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Stashbox.Attributes.DependencyAttribute"/>
            </summary>
            <param name="name">The name of the dependency.</param>
        </member>
        <member name="T:Stashbox.Attributes.InjectionConstructorAttribute">
            <summary>
            Represents an attribute for tracking constructor preferences.
            </summary>
        </member>
        <member name="T:Stashbox.Attributes.InjectionMethodAttribute">
            <summary>
            Represents an attribute for tracking injection methods.
            </summary>
        </member>
        <member name="T:Stashbox.ContainerContext">
            <summary>
            Represents the container context.
            </summary>
        </member>
        <member name="M:Stashbox.ContainerContext.#ctor(Stashbox.Infrastructure.IRegistrationRepository,Stashbox.Infrastructure.IStashboxContainer,Stashbox.Infrastructure.IResolutionStrategy,Stashbox.Extensions.ExtendedImmutableTree{Stashbox.MetaInfo.MetaInfoCache},Stashbox.Extensions.ExtendedImmutableTree{System.Func{Stashbox.Entity.ResolutionInfo,System.Object}})">
            <summary>
            Constructs a <see cref="T:Stashbox.ContainerContext"/>
            </summary>
            <param name="registrationRepository">The repository of the registrations.</param>
            <param name="container">The container itself.</param>
            <param name="resolutionStrategy">The resolution strategy.</param>
            <param name="metaInfoRepository">The meta information repository.</param>
            <param name="delegateRepository">Repository of the compiled delegates.</param>
        </member>
        <member name="P:Stashbox.ContainerContext.RegistrationRepository">
            <summary>
            The repository of the registrations.
            </summary>
        </member>
        <member name="P:Stashbox.ContainerContext.Container">
            <summary>
            The container itself.
            </summary>
        </member>
        <member name="P:Stashbox.ContainerContext.ResolutionStrategy">
            <summary>
            The resolution strategy.
            </summary>
        </member>
        <member name="P:Stashbox.ContainerContext.MetaInfoRepository">
            <summary>
            The meta information repository.
            </summary>
        </member>
        <member name="P:Stashbox.ContainerContext.DelegateRepository">
            <summary>
            Repository of the compiled delegates.
            </summary>
        </member>
        <member name="P:Stashbox.ContainerContext.Bag">
            <summary>
            A generic key-value store.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.ConstructorInformation">
            <summary>
            Represents information about a constructor.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.ConstructorInformation.Constructor">
            <summary>
            Stores the reflected constructor info.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.ConstructorInformation.HasInjectionAttribute">
            <summary>
            True if the constructor is decorated with <see cref="T:Stashbox.Attributes.InjectionConstructorAttribute"/>
            </summary>
        </member>
        <member name="P:Stashbox.Entity.ConstructorInformation.Parameters">
            <summary>
            The parameters of the constructor.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.InjectionParameter">
            <summary>
            Represents an injection parameter.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.InjectionParameter.Name">
            <summary>
            The name of the injection parameter.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.InjectionParameter.Value">
            <summary>
            The value of the injection parameter.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.MethodInformation">
            <summary>
            Represents information about a method.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.MethodInformation.Method">
            <summary>
            Stores the reflected method information.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.MethodInformation.Parameters">
            <summary>
            Stores the parameters of the method.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.MemberInformation">
            <summary>
            Represents information about a member.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.MemberInformation.MemberInfo">
            <summary>
            Stores the reflected member information.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.MemberInformation.TypeInformation">
            <summary>
            Stores the type information about the member.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.RegistrationInfo">
            <summary>
            Represents type information about a registration.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.RegistrationInfo.TypeTo">
            <summary>
            Represents the type of the implementation.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.RegistrationInfo.TypeFrom">
            <summary>
            Represents the type of the service the implementation bound to.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.Resolution.ResolutionTarget">
            <summary>
            Represents a resolution target.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.Resolution.ResolutionTarget.TypeInformation">
            <summary>
            Type information about the target.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.Resolution.ResolutionTarget.Resolver">
            <summary>
            Storing a resolver for the target.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.Resolution.ResolutionTarget.ResolutionTargetValue">
            <summary>
            Storing an already set value for the target.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.ResolutionInfo">
            <summary>
            Represents information about the actual resolution flow.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.ResolutionInfo.OverrideManager">
            <summary>
            The override manager.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.ResolutionInfo.FactoryParams">
            <summary>
            The factory parameters.
            </summary>
        </member>
        <member name="T:Stashbox.Entity.TypeInformation">
            <summary>
            Represents type information about a dependency.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.TypeInformation.Type">
            <summary>
            The reflected type of the dependency.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.TypeInformation.ParentType">
            <summary>
            The reflected type of the parent of the dependency.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.TypeInformation.DependencyName">
            <summary>
            The name of the dependency.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.TypeInformation.CustomAttributes">
            <summary>
            Custom attributes of the dependency.
            </summary>
        </member>
        <member name="P:Stashbox.Entity.TypeInformation.MemberName">
            <summary>
            The member name of the dependency.
            </summary>
        </member>
        <member name="T:Stashbox.Exceptions.ExceptionBase">
            <summary>
            Represents the base of the custom exceptions used by the <see cref="T:Stashbox.StashboxContainer"/>
            </summary>
        </member>
        <member name="P:Stashbox.Exceptions.ExceptionBase.TypeName">
            <summary>
            The name of the actually resolved type.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.ExceptionBase.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ExceptionBase"/>
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Stashbox.Exceptions.ResolutionFailedException">
            <summary>
            Represents the exception threw when a service resolution failed.
            </summary>
        </member>
        <member name="M:Stashbox.Exceptions.ResolutionFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs a <see cref="T:Stashbox.Exceptions.ResolutionFailedException"/>
            </summary>
            <param name="typeName">The name of the service type.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Stashbox.Extensions.ExtendedImmutableTree`1">
            <summary>
            Represents an extended version of the <see cref="T:Ronin.Common.ImmutableTree`1"/>
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Stashbox.Extensions.ExtendedImmutableTree`1.GetOrAdd``1(``0,System.Func{`0},System.Boolean)">
            <summary>
            Gets or adds a value to the collection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="valueFactory">The new value factory.</param>
            <param name="forceUpdate">If set to true a new value will be stored into the collection even if it's already exists.</param>
            <returns>The retrieved or added value.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.ContainerExtension.IPostBuildExtension">
            <summary>
            Represents a post build extension.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.ContainerExtension.IPostBuildExtension.PostBuild(System.Object,System.Type,Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation,Stashbox.Entity.InjectionParameter[])">
            <summary>
            Executes the post build extension.
            </summary>
            <param name="instance">The resolved object.</param>
            <param name="targetType">The type of the resolved object.</param>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
            <param name="resolutionInfo">Information about the actual resolution.</param>
            <param name="resolveType">The type information of the resolved type.</param>
            <param name="injectionParameters">The injection parameters.</param>
            <returns>The extended object.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.ContainerExtension.IRegistrationExtension">
            <summary>
            Represents a registration extension.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.ContainerExtension.IRegistrationExtension.OnRegistration(Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.RegistrationInfo,Stashbox.Entity.InjectionParameter[])">
            <summary>
            Executes when a new service being registered.
            </summary>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
            <param name="registrationInfo">Information about the registration.</param>
            <param name="injectionParameters">The injection parameters.</param>
        </member>
        <member name="T:Stashbox.Infrastructure.ContainerExtension.IContainerExtension">
            <summary>
            Represents a container extension.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.ContainerExtension.IContainerExtension.Initialize(Stashbox.Infrastructure.IContainerContext)">
            <summary>
            Initializes the container extension.
            </summary>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
        </member>
        <member name="M:Stashbox.Infrastructure.ContainerExtension.IContainerExtension.CleanUp">
            <summary>
            Cleans up the container extension.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.ContainerExtension.IContainerExtension.CreateCopy">
            <summary>
            Creates a copy of the extension.
            </summary>
            <returns>The actual copy.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.IRegistrationContext">
            <summary>
            Represents a registration context. Allows a fluent registration configuration.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IRegistrationContext.TypeFrom">
            <summary>
            The type that will be requested.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IRegistrationContext.TypeTo">
            <summary>
            The type that will be returned.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IRegistrationContext.ContainerContext">
            <summary>
            The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/>
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithLifetime(Stashbox.Infrastructure.ILifetime)">
            <summary>
            Sets the lifetime of the registration.
            </summary>
            <param name="lifetime">An <see cref="T:Stashbox.Infrastructure.ILifetime"/> implementation.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithName(System.String)">
            <summary>
            Sets the name of the registration.
            </summary>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithInjectionParameters(Stashbox.Entity.InjectionParameter[])">
            <summary>
            Sets injection parameters for the registration.
            </summary>
            <param name="injectionParameters">The injection parameters.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithFactory(System.Func{System.Object})">
            <summary>
            Sets a parameterless factory delegate for the registration.
            </summary>
            <param name="singleFactory">The factory delegate.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithFactory(System.Func{System.Object,System.Object})">
            <summary>
            Sets a one parameter factory delegate for the registration.
            </summary>
            <param name="singleParameterFactory">The one parameter factory delegate.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithFactory(System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a two parameters factory delegate for the registration.
            </summary>
            <param name="twoParametersFactory">The two parameters factory delegate.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WithFactory(System.Func{System.Object,System.Object,System.Object,System.Object})">
            <summary>
            Sets a three parameters factory delegate for the registration.
            </summary>
            <param name="threeParametersFactory">The three parameters factory delegate.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WhenDependantIs``1(System.String)">
            <summary>
            Sets a dependant target condition for the registration.
            </summary>
            <typeparam name="TTarget">The type of the dependant.</typeparam>
            <param name="dependencyName">The name of the dependency.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WhenDependantIs(System.Type,System.String)">
            <summary>
            Sets a dependant target condition for the registration.
            </summary>
            <param name="targetType">The type of the dependant.</param>
            <param name="dependencyName">The name of the dependency.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WhenHas``1">
            <summary>
            Sets an attribute condition for the registration.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.WhenHas(System.Type)">
            <summary>
            Sets an attribute condition for the registration.
            </summary>
            <param name="attributeType">The type of the attribute.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.When(System.Func{Stashbox.Entity.TypeInformation,System.Boolean})">
            <summary>
            Sets a generic condition for the registration.
            </summary>
            <param name="resolutionCondition">The predicate.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.Register">
            <summary>
            Registers the registration into the container.
            </summary>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationContext.ReMap">
            <summary>
            Replaces an already registered service.
            </summary>
            <returns>The <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which on this method was called.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.IResolutionStrategy">
            <summary>
            Represents a resolution strategy.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IResolutionStrategy.CanResolve(Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Entity.InjectionParameter[])">
            <summary>
            Checks whether a type can be resolved or not.
            </summary>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
            <param name="typeInformation">The type info of the requested service.</param>
            <param name="injectionParameters">The injection parameters.</param>
            <returns>True if the type can be resolved, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IResolutionStrategy.BuildResolutionTarget(Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Entity.InjectionParameter[])">
            <summary>
            Builds a <see cref="T:Stashbox.Entity.Resolution.ResolutionTarget"/> for a dependency.
            </summary>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
            <param name="typeInformation">The type info of the requested service.</param>
            <param name="injectionParameters">The injection parameters.</param>
            <returns>The created resolution target.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IResolutionStrategy.EvaluateResolutionTarget(Stashbox.Entity.Resolution.ResolutionTarget,Stashbox.Entity.ResolutionInfo)">
            <summary>
            Evaluates a <see cref="T:Stashbox.Entity.Resolution.ResolutionTarget"/>
            </summary>
            <param name="resolutionTarget">The resolution target object.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <returns>The evaluated instance.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IResolutionStrategy.GetExpressionForResolutionTarget(Stashbox.Entity.Resolution.ResolutionTarget,Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression)">
            <summary>
            Gets an expression for evaluating a <see cref="T:Stashbox.Entity.Resolution.ResolutionTarget"/>
            </summary>
            <param name="resolutionTarget">The resolution target object.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <returns>The expression.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.IContainerContext">
            <summary>
            Represents the container context.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.RegistrationRepository">
            <summary>
            The repository of the registrations.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.Container">
            <summary>
            The container itself.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.ResolutionStrategy">
            <summary>
            The resolution strategy.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.MetaInfoRepository">
            <summary>
            The meta information repository.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.DelegateRepository">
            <summary>
            Repository of the compiled delegates.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IContainerContext.Bag">
            <summary>
            A generic key-value store.
            </summary>
        </member>
        <member name="T:Stashbox.Infrastructure.IDependencyRegistrator">
            <summary>
            Represents a dependency registrator.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.PrepareType``2">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.PrepareType``1(System.Type)">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.PrepareType(System.Type,System.Type)">
            <summary>
            Prepares a type for registration.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.PrepareType``1">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterType``2(System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterType``1(System.Type,System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterType``1(System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.ReMap``2(System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.ReMap``1(System.Type,System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.ReMap(System.Type,System.Type,System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterInstance``1(System.Object,System.String)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.RegisterInstance(System.Object,System.String)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.BuildUp``1(System.Object,System.String)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyRegistrator.BuildUp(System.Object,System.String)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.IDependencyResolver">
            <summary>
            Represents a dependency resolver.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyResolver.Resolve``1(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves an instance from the container.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="name">The name of the requested registration.</param>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyResolver.Resolve(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested instance.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IDependencyResolver.ResolveAll``1(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves all registered types of a service.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.IStashboxContainer">
            <summary>
            Represents a dependency injection container.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.RegisterExtension(Stashbox.Infrastructure.ContainerExtension.IContainerExtension)">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.ContainerExtension.IContainerExtension"/> into the container.
            </summary>
            <param name="containerExtension">The container extension.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.RegisterResolver``1(System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,System.Boolean},System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.Resolver})">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.Resolver"/> into the container.
            </summary>
            <typeparam name="TResolverType">The resolver type.</typeparam>
            <param name="resolverPredicate">Predicate which decides that the resolver is can be used for an actual resolution.</param>
            <param name="factory">The factory which produces a new instance of the resolver.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.RegisterResolver(System.Type,System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,System.Boolean},System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.Resolver})">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.Resolver"/> into the container.
            </summary>
            <param name="resolverType">The type of the resolver.</param>
            <param name="resolverPredicate">Predicate which decides that the resolver is can be used for an actual resolution.</param>
            <param name="factory">The factory which produces a new instance of the resolver.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns>The child container.</returns>
        </member>
        <member name="P:Stashbox.Infrastructure.IStashboxContainer.ParentContainer">
            <summary>
            Stores the parent container object if has any, otherwise null.
            </summary>
        </member>
        <member name="P:Stashbox.Infrastructure.IStashboxContainer.ContainerContext">
            <summary>
            Stores the container context.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.IsRegistered``1(System.String)">
            <summary>
            Checks a service is registered into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IStashboxContainer.IsRegistered(System.Type,System.String)">
            <summary>
            Checks a service is registered into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Infrastructure.ILifetime">
            <summary>
            Represents a lifetime.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.ILifetime.GetInstance(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the instance managed by the <see cref="T:Stashbox.Infrastructure.ILifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.ILifetime.GetExpression(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the expression for getting the instance managed by the <see cref="T:Stashbox.Infrastructure.ILifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.ILifetime.CleanUp">
            <summary>
            Cleans up the lifetime manager.
            </summary>
        </member>
        <member name="T:Stashbox.Infrastructure.IObjectBuilder">
            <summary>
            Represents an object builder.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IObjectBuilder.BuildInstance(Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Creates an instance of a registered service.
            </summary>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IObjectBuilder.GetExpression(Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Creates the expression for creating an instance of a registered service.
            </summary>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IObjectBuilder.ServiceUpdated(Stashbox.Entity.RegistrationInfo)">
            <summary>
            Indicates a service updated event when a ReMap occures on a tracked service.
            </summary>
            <param name="registrationInfo">The new service registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IObjectBuilder.CleanUp">
            <summary>
            Cleans up the object builder.
            </summary>
        </member>
        <member name="T:Stashbox.Infrastructure.IRegistrationRepository">
            <summary>
            Represents a registration repository.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.AddRegistration(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds a new registration into the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.AddOrUpdateRegistration(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds or updates an element in the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.AddGenericDefinition(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds a new generic definition into the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.AddOrUpdateGenericDefinition(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds or updates a generic definition in the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.GetAllRegistrations">
            <summary>
            Gets all registrations.
            </summary>
            <returns>A collection of the registrations.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.TryGetRegistrationWithConditions(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a registration with conditions.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.TryGetRegistrationWithConditionsWithoutGenericDefinitionExtraction(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a non generic definition registration with conditions.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.TryGetRegistration(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a registrations.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.TryGetTypedRepositoryRegistrations(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration[]@)">
            <summary>
            Tries to retrieve all registrations for a type.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registrations">The retrieved registrations.</param>
            <returns>True if registrations were found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.Constains(System.Type,System.String)">
            <summary>
            Checks a type exists in the repository.
            </summary>
            <param name="type">The requested type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.ConstainsTypeKeyWithConditions(Stashbox.Entity.TypeInformation)">
            <summary>
            Check a type exists with conditions.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.ConstainsTypeKeyWithConditionsWithoutGenericDefinitionExtraction(Stashbox.Entity.TypeInformation)">
            <summary>
            Checks a non generic definition type exists in the repository.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IRegistrationRepository.CleanUp">
            <summary>
            Cleans up the repository.
            </summary>
        </member>
        <member name="T:Stashbox.Infrastructure.IServiceRegistration">
            <summary>
            Represents a service registration.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IServiceRegistration.GetInstance(Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the resolved instance.
            </summary>
            <param name="resolutionInfo">The info about the current resolution.</param>
            <param name="resolveType">The resolve type.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IServiceRegistration.GetExpression(Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Creates an expression for creating the resolved instance.
            </summary>
            <param name="resolutionInfo">The info about the current resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the current resolution.</param>
            <param name="resolveType">The resolve type.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.IServiceRegistration.IsUsableForCurrentContext(Stashbox.Entity.TypeInformation)">
            <summary>
            Checks whether the registration can be used for a current resolution.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration can be used for the current resolution, otherwise false.</returns>
        </member>
        <member name="P:Stashbox.Infrastructure.IServiceRegistration.HasCondition">
            <summary>
            True if the registration contains any condition, otherwise false.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.IServiceRegistration.ServiceUpdated(Stashbox.Entity.RegistrationInfo)">
            <summary>
            Indicates a service updated event when a ReMap occures on a tracked service.
            </summary>
            <param name="registrationInfo">The new service registration.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.IServiceRegistration.CleanUp">
            <summary>
            Cleans up the registration.
            </summary>
        </member>
        <member name="T:Stashbox.Infrastructure.Resolver">
            <summary>
            Represents a dependency resolver.
            </summary>
        </member>
        <member name="F:Stashbox.Infrastructure.Resolver.BuilderContext">
            <summary>
            The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/>
            </summary>
        </member>
        <member name="F:Stashbox.Infrastructure.Resolver.TypeInfo">
            <summary>
            The type information about the resolved service.
            </summary>
        </member>
        <member name="M:Stashbox.Infrastructure.Resolver.#ctor(Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation)">
            <summary>
            Constructs the <see cref="T:Stashbox.Infrastructure.Resolver"/>
            </summary>
            <param name="containerContext">The <see cref="T:Stashbox.Infrastructure.IContainerContext"/> of the <see cref="T:Stashbox.StashboxContainer"/></param>
            <param name="typeInfo">The type information about the resolved service.</param>
        </member>
        <member name="M:Stashbox.Infrastructure.Resolver.Resolve(Stashbox.Entity.ResolutionInfo)">
            <summary>
            Produces an instance.
            </summary>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.Infrastructure.Resolver.GetExpression(Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression)">
            <summary>
            Produces an expression for creating an instance.
            </summary>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <returns>The expression.</returns>
        </member>
        <member name="T:Stashbox.LifeTime.SingletonLifetime">
            <summary>
            Represents a singleton lifetime manager.
            </summary>
        </member>
        <member name="M:Stashbox.LifeTime.SingletonLifetime.GetInstance(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the instance managed by the <see cref="T:Stashbox.LifeTime.SingletonLifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.LifeTime.SingletonLifetime.GetExpression(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the expression for getting the instance managed by the <see cref="T:Stashbox.LifeTime.SingletonLifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.LifeTime.SingletonLifetime.CleanUp">
            <summary>
            Cleans up the lifetime manager.
            </summary>
        </member>
        <member name="T:Stashbox.MetaInfo.MetaInfoCache">
            <summary>
            Represents a store which contains metadata about the services.
            </summary>
        </member>
        <member name="P:Stashbox.MetaInfo.MetaInfoCache.TypeTo">
            <summary>
            The type of the actual service implementation.
            </summary>
        </member>
        <member name="P:Stashbox.MetaInfo.MetaInfoCache.Constructors">
            <summary>
            Stores the reflected constructor informations.
            </summary>
        </member>
        <member name="P:Stashbox.MetaInfo.MetaInfoCache.InjectionMethods">
            <summary>
            Stores the reflected injection method informations.
            </summary>
        </member>
        <member name="P:Stashbox.MetaInfo.MetaInfoCache.InjectionMembers">
            <summary>
            Stores the reflected injection memeber informations.
            </summary>
        </member>
        <member name="M:Stashbox.MetaInfo.MetaInfoCache.#ctor(System.Type)">
            <summary>
            Constructs the <see cref="T:Stashbox.MetaInfo.MetaInfoCache"/>
            </summary>
            <param name="typeTo">The type of the actual service implementation.</param>
        </member>
        <member name="T:Stashbox.StashboxContainer">
            <summary>
            Represents the stashbox dependency injection container.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.#ctor">
            <summary>
            Constructs a <see cref="T:Stashbox.StashboxContainer"/>
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterExtension(Stashbox.Infrastructure.ContainerExtension.IContainerExtension)">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.ContainerExtension.IContainerExtension"/> into the container.
            </summary>
            <param name="containerExtension">The container extension.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterResolver``1(System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,System.Boolean},System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.Resolver})">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.Resolver"/> into the container.
            </summary>
            <typeparam name="TResolverType">The resolver type.</typeparam>
            <param name="resolverPredicate">Predicate which decides that the resolver is can be used for an actual resolution.</param>
            <param name="factory">The factory which produces a new instance of the resolver.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterResolver(System.Type,System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,System.Boolean},System.Func{Stashbox.Infrastructure.IContainerContext,Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.Resolver})">
            <summary>
            Registers a <see cref="T:Stashbox.Infrastructure.Resolver"/> into the container.
            </summary>
            <param name="resolverType">The type of the resolver.</param>
            <param name="resolverPredicate">Predicate which decides that the resolver is can be used for an actual resolution.</param>
            <param name="factory">The factory which produces a new instance of the resolver.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.CreateChildContainer">
            <summary>
            Creates a child container.
            </summary>
            <returns>The child container.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.IsRegistered``1(System.String)">
            <summary>
            Checks a service is registered into the container.
            </summary>
            <typeparam name="TFrom">The service type.</typeparam>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.IsRegistered(System.Type,System.String)">
            <summary>
            Checks a service is registered into the container.
            </summary>
            <param name="typeFrom">The service type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the service is registered, otherwise false.</returns>
        </member>
        <member name="P:Stashbox.StashboxContainer.ParentContainer">
            <summary>
            Stores the parent container object if has any, otherwise null.
            </summary>
        </member>
        <member name="P:Stashbox.StashboxContainer.ContainerContext">
            <summary>
            Stores the container context.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.Dispose">
            <summary>
            Disposes the container.
            </summary>
        </member>
        <member name="M:Stashbox.StashboxContainer.Dispose(System.Boolean)">
            <summary>
            Disposes the container.
            </summary>
            <param name="disposing">Indicates the container is disposing or not.</param>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterType``2(System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterType``1(System.Type,System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterType``1(System.String)">
            <summary>
            Registers a type into the container.
            </summary>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap``2(System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap``1(System.Type,System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ReMap(System.Type,System.Type,System.String)">
            <summary>
            Replaces an existing registration with a new one.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterInstance``1(System.Object,System.String)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.RegisterInstance(System.Object,System.String)">
            <summary>
            Registers an already constructed instance into the container.
            </summary>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.BuildUp``1(System.Object,System.String)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.BuildUp(System.Object,System.String)">
            <summary>
            Registers an already constructed instance, but the container will perform injections and extensions on it.
            </summary>
            <param name="instance">The constructed object.</param>
            <param name="name">The name of the registration.</param>
            <returns>The <see cref="T:Stashbox.Infrastructure.IDependencyRegistrator"/> which on this method was called.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.PrepareType``2">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.PrepareType``1(System.Type)">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TFrom">Type that will be requested.</typeparam>
            <param name="typeTo">Type that will be returned.</param>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.PrepareType(System.Type,System.Type)">
            <summary>
            Prepares a type for registration.
            </summary>
            <param name="typeFrom">Type that will be requested.</param>
            <param name="typeTo">Type that will be returned.</param>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.PrepareType``1">
            <summary>
            Prepares a type for registration.
            </summary>
            <typeparam name="TTo">Type that will be returned.</typeparam>
            <returns>The created <see cref="T:Stashbox.Infrastructure.IRegistrationContext"/> which allows further configurations.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Resolve``1(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves an instance from the container.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="name">The name of the requested registration.</param>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.Resolve(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves an instance from the container.
            </summary>
            <param name="typeFrom">The type of the requested instance.</param>
            <param name="name">The name of the requested registration.</param>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:Stashbox.StashboxContainer.ResolveAll``1(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{Stashbox.Overrides.Override})">
            <summary>
            Resolves all registered types of a service.
            </summary>
            <typeparam name="TKey">The type of the requested instance.</typeparam>
            <param name="factoryParameters">The parameters for the registered factory delegate.</param>
            <param name="overrides">Parameter overrides.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="T:Stashbox.Lifetime.TransientLifetime">
            <summary>
            Represents a transient lifetime manager.
            </summary>
        </member>
        <member name="M:Stashbox.Lifetime.TransientLifetime.GetInstance(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the instance managed by the <see cref="T:Stashbox.Lifetime.TransientLifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.Lifetime.TransientLifetime.GetExpression(Stashbox.Infrastructure.IObjectBuilder,Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the expression for getting the instance managed by the <see cref="T:Stashbox.Lifetime.TransientLifetime"/>
            </summary>
            <param name="objectBuilder">An <see cref="T:Stashbox.Infrastructure.IObjectBuilder"/> implementation.</param>
            <param name="resolutionInfo">The info about the actual resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the actual resolution.</param>
            <param name="resolveType">The type info about the resolved type.</param>
            <returns>The lifetime managed object.</returns>
        </member>
        <member name="M:Stashbox.Lifetime.TransientLifetime.CleanUp">
            <summary>
            Cleans up the lifetime manager.
            </summary>
        </member>
        <member name="T:Stashbox.Overrides.NamedOverride">
            <summary>
            Represents a named override.
            </summary>
        </member>
        <member name="P:Stashbox.Overrides.NamedOverride.OverrideName">
            <summary>
            The name of the override.
            </summary>
        </member>
        <member name="M:Stashbox.Overrides.NamedOverride.#ctor(System.String,System.Object)">
            <summary>
            Constructs a <see cref="T:Stashbox.Overrides.NamedOverride"/>
            </summary>
            <param name="name">The name of the override.</param>
            <param name="value">The overridden value.</param>
        </member>
        <member name="T:Stashbox.Overrides.Override">
            <summary>
            Represents an override.
            </summary>
        </member>
        <member name="P:Stashbox.Overrides.Override.Value">
            <summary>
            The overridden value.
            </summary>
        </member>
        <member name="M:Stashbox.Overrides.Override.#ctor(System.Object)">
            <summary>
            Constructs an <see cref="T:Stashbox.Overrides.Override"/>
            </summary>
            <param name="value">The overridden value.</param>
        </member>
        <member name="T:Stashbox.Overrides.OverrideManager">
            <summary>
            Represents an override manager.
            </summary>
        </member>
        <member name="M:Stashbox.Overrides.OverrideManager.#ctor(Stashbox.Overrides.Override[])">
            <summary>
            Constructs an <see cref="T:Stashbox.Overrides.OverrideManager"/>
            </summary>
            <param name="overrides">The initial overrides.</param>
        </member>
        <member name="M:Stashbox.Overrides.OverrideManager.GetOverriddenValue(Stashbox.Entity.TypeInformation)">
            <summary>
            Gets an overridden value if has any.
            </summary>
            <param name="parameter">The type information.</param>
            <returns>The overridden value.</returns>
        </member>
        <member name="M:Stashbox.Overrides.OverrideManager.ContainsValue(Stashbox.Entity.TypeInformation)">
            <summary>
            Checks that the <see cref="T:Stashbox.Overrides.OverrideManager"/> contains an override for a service.
            </summary>
            <param name="parameter">The type information.</param>
            <returns>True if an override already exists for a service, otherwise false.</returns>
        </member>
        <member name="T:Stashbox.Overrides.TypeOverride">
            <summary>
            Represents a type override.
            </summary>
        </member>
        <member name="P:Stashbox.Overrides.TypeOverride.OverrideType">
            <summary>
            The override type.
            </summary>
        </member>
        <member name="M:Stashbox.Overrides.TypeOverride.#ctor(System.Type,System.Object)">
            <summary>
            Constructs a <see cref="T:Stashbox.Overrides.TypeOverride"/>
            </summary>
            <param name="type">The override type.</param>
            <param name="value">The overridden value.</param>
        </member>
        <member name="T:Stashbox.Registration.RegistrationRepository">
            <summary>
            Represents a registration repository.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.#ctor">
            <summary>
            Constructs a <see cref="T:Stashbox.Registration.RegistrationRepository"/>
            </summary>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.GetAllRegistrations">
            <summary>
            Gets all registrations.
            </summary>
            <returns>A collection of the registrations.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.TryGetRegistrationWithConditions(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a registration with conditions.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.TryGetRegistrationWithConditionsWithoutGenericDefinitionExtraction(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a non generic definition registration with conditions.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.TryGetRegistration(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration@)">
            <summary>
            Tries to retrieve a registrations.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registration">The retrieved registration.</param>
            <returns>True if a registration was found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.AddRegistration(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds a new registration into the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.AddOrUpdateRegistration(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds or updates an element in the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.AddGenericDefinition(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds a new generic definition into the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.AddOrUpdateGenericDefinition(System.Type,Stashbox.Infrastructure.IServiceRegistration,System.String)">
            <summary>
            Adds or updates a generic definition in the repository.
            </summary>
            <param name="typeKey">The key type.</param>
            <param name="registration">The registration.</param>
            <param name="nameKey">The name of the registration.</param>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.TryGetTypedRepositoryRegistrations(Stashbox.Entity.TypeInformation,Stashbox.Infrastructure.IServiceRegistration[]@)">
            <summary>
            Tries to retrieve all registrations for a type.
            </summary>
            <param name="typeInfo">The requested type information.</param>
            <param name="registrations">The retrieved registrations.</param>
            <returns>True if registrations were found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.Constains(System.Type,System.String)">
            <summary>
            Checks a type exists in the repository.
            </summary>
            <param name="type">The requested type.</param>
            <param name="name">The registration name.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.ConstainsTypeKeyWithConditions(Stashbox.Entity.TypeInformation)">
            <summary>
            Check a type exists with conditions.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.ConstainsTypeKeyWithConditionsWithoutGenericDefinitionExtraction(Stashbox.Entity.TypeInformation)">
            <summary>
            Checks a non generic definition type exists in the repository.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration found, otherwise false.</returns>
        </member>
        <member name="M:Stashbox.Registration.RegistrationRepository.CleanUp">
            <summary>
            Cleans up the repository.
            </summary>
        </member>
        <member name="T:Stashbox.Registration.ServiceRegistration">
            <summary>
            Represents a service registration.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.#ctor(Stashbox.Infrastructure.ILifetime,Stashbox.Infrastructure.IObjectBuilder,System.Collections.Generic.HashSet{System.Type},System.Type,System.Func{Stashbox.Entity.TypeInformation,System.Boolean})">
            <summary>
            Constructs a <see cref="T:Stashbox.Registration.ServiceRegistration"/>
            </summary>
            <param name="lifetimeManager">The lifetime manager.</param>
            <param name="objectBuilder">THe object builder.</param>
            <param name="attributeConditions">The attribute conditions.</param>
            <param name="targetTypeCondition">The target type condition.</param>
            <param name="resolutionCondition">The resolution condition.</param>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.GetInstance(Stashbox.Entity.ResolutionInfo,Stashbox.Entity.TypeInformation)">
            <summary>
            Gets the resolved instance.
            </summary>
            <param name="resolutionInfo">The info about the current resolution.</param>
            <param name="resolveType">The resolve type.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.IsUsableForCurrentContext(Stashbox.Entity.TypeInformation)">
            <summary>
            Checks whether the registration can be used for a current resolution.
            </summary>
            <param name="typeInfo">The type information.</param>
            <returns>True if the registration can be used for the current resolution, otherwise false.</returns>
        </member>
        <member name="P:Stashbox.Registration.ServiceRegistration.HasCondition">
            <summary>
            True if the registration contains any condition, otherwise false.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.ServiceUpdated(Stashbox.Entity.RegistrationInfo)">
            <summary>
            Indicates a service updated event when a ReMap occures on a tracked service.
            </summary>
            <param name="registrationInfo">The new service registration.</param>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.CleanUp">
            <summary>
            Cleans up the registration.
            </summary>
        </member>
        <member name="M:Stashbox.Registration.ServiceRegistration.GetExpression(Stashbox.Entity.ResolutionInfo,System.Linq.Expressions.Expression,Stashbox.Entity.TypeInformation)">
            <summary>
            Creates an expression for creating the resolved instance.
            </summary>
            <param name="resolutionInfo">The info about the current resolution.</param>
            <param name="resolutionInfoExpression">The expression of the info about the current resolution.</param>
            <param name="resolveType">The resolve type.</param>
            <returns>The expression.</returns>
        </member>
    </members>
</doc>
